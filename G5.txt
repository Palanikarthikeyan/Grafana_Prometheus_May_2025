https://grafana.com/grafana/dashboards


Common Gateway Interface (CGI)
--------------------------------
|
Client -------request------>-------Webserver------->---serverscripts----->---DataBase
# web 							...	(p1.pl p1.rb p1.py..)	
			----------------<------------------
				response (Content-type:text/html)
				..
install webserver
configure webserver
 |->server => <Script alias /cgi-bin/  /var/lib/cgi-bin/<serverCode>
 |->client => /www     /var/www/<html files>
				
install database
configure database
..
start webserver
start database
|
open a browser ->[IPAddress]
		|  Home Page | <-- index.html
		
		|IPAddress/cgi-bin/<serverCode-filename>/
		|IPAddress/<htmlFile>/
----------------------------------Vs-----------------------------------------------------		
 [project-Folder]/
		|__templates/<client-Code>
		|__serverCode
		|__....
---------------------------------------------------------------------
jinja2 template code
---------------------
IND:|   |		<== <h1><font color='green'>IND:{{score}}</font></h1>
Product:|    |
SalesCount:|   |
----------------------------------------------------------------------
		p1.py		     Web-Appln
	+-----------------+	  +-----------------------------------------------------+
	|		  |       | [client][webserver-servercode][database][otherTools]|
	|		  |   Vs  |			:8080	    :3306     :3490
	+-----------------+       +-----------------------------------------------------+
						IP:5000 <= application port
						--------

	+--------------------------+		Application_enduser: run the application
	|[Application]-IP:5000			
	|	|
	|   :8000
	+------|--------------------+
	       |___________Prometheus:9090     Monitoring_end: mysql_
							       flask_
							       fastapi_
		
###############################################################################

unzip flask-prometheus
cd flask-prometheus
|
ls
|
file: vi install_docker.sh {Enter}
	
# install docker 

#!/bin/bash
# this script installs docker and docker-compose

curl -fsSL get.docker.com -o get-docker.sh
sh get-docker.sh
sudo curl -L https://github.com/docker/compose/releases/download/1.21.2/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
chmod +x /usr/local/bin/docker-compose
:wq{Enter}
|	
chmod a+x install_docker.sh  {Enter}
./install_docker.sh {Enter}
|
docker-compose  up -d {Enter}   ->   	another terminal -> curl 127.0.0.1:8000/metrics
docker ps {Enter}

curl 127.0.0.1:5000 {Enter}  ->	another terminal -> curl 127.0.0.1:8000/metrics
curl 127.0.0.1:5000/query{Enter}->	another terminal -> curl 127.0.0.1:8000/metrics
curl 127.0.0.1:5000/sleep{Enter}-> 	another terminal -> curl 127.0.0.1:8000/metrics						|
					update application details to prometheus
	
###################################################################################

 Application-Monitoring ->Ex:WebAppl -> mysql_....    >90
 Infrastructure-Monitoring ->localm/c remote node -> cpu_utl... >90	

 [prometheus]------push-->-----[alertmanager]
				-----------
					|----invoke the channels


alert manager - executable file
--------------
 |->manage the alerts generated by prometheus
 |->invoke the channels

 |->1. download alertmanager binary file - from prometheus.io/downloads
 |->2. extract-unzip
 |->3. create alertmanager.yml file 
	      ================
		|->4. write channel configuration(slack;email;...)
		      if you do anychanges in alertmanager.yml - restart alertmanager
 
 [promethesus] <-----> [alertamanger]
 |
 - alertmanager: 9093

 ## Write alertrule - create yaml file

 groups:
 - name: <groupName>
   rules:
   - record: <ruleName>
     expr: promQL
   - alert: <alertruleName>
     expr: promQL - conditionbased
     for: duration # How long the condition must be true before firing the alert
     labels:
     <><>severity:<>{warning|critical|info}<-- user defined
     annotations:
     <><>summary: "own sentence"
     <><>description: "....."

 avg by(instance)(rate(node_cpu_seconds_total{mode="idle"}[5m])) * 100 >90

 vi p1.yml
 groups:
 - name: node1
   rules:
   - alert: cpuUsage
     expr: avg by(instance)(rate(node_cpu_seconds_total{mode="idle"}[5m])) * 100 >90
     for: 5m
     labels:
       severity: critical
     annoatations:
       summary: Machine is critical state

 |
update this file in prometheus.yml ->restart prometheus


[Grafana]+[Excel/json/csv]
	    |
	   ...   ..  ..

	
#!/bin/bash
ALERTMANAGER_VERSION="0.28.0"
wget https://github.com/prometheus/alertmanager/releases/download/v${ALERTMANAGER_VERSION}/alertmanager-${ALERTMANAGER_VERSION}.linux-amd64.tar.gz
tar xvzf alertmanager-${ALERTMANAGER_VERSION}.linux-amd64.tar.gz
cd alertmanager-${ALERTMANAGER_VERSION}.linux-amd64/
# if you just want to start prometheus as root
#./alertmanager --config.file=simple.yml

# create user
useradd --no-create-home --shell /bin/false alertmanager

# create directories
mkdir /etc/alertmanager
mkdir /etc/alertmanager/template
mkdir -p /var/lib/alertmanager/data

# touch config file
touch /etc/alertmanager/alertmanager.yml

# set ownership
chown -R alertmanager:alertmanager /etc/alertmanager
chown -R alertmanager:alertmanager /var/lib/alertmanager

# copy binaries
cp alertmanager /usr/local/bin/
cp amtool /usr/local/bin/

# set ownership
chown alertmanager:alertmanager /usr/local/bin/alertmanager
chown alertmanager:alertmanager /usr/local/bin/amtool

# setup systemd
echo '[Unit]
Description=Prometheus Alertmanager Service
Wants=network-online.target
After=network.target

[Service]
User=alertmanager
Group=alertmanager
Type=simple
ExecStart=/usr/local/bin/alertmanager \
    --config.file /etc/alertmanager/alertmanager.yml \
    --storage.path /var/lib/alertmanager/data
Restart=always

[Install]
WantedBy=multi-user.target' > /etc/systemd/system/alertmanager.service

systemctl daemon-reload
systemctl enable alertmanager
systemctl start alertmanager

# restart prometheus
systemctl start prometheus


echo "(1/2)Setup complete.
Add the following lines and substitute with correct values to /etc/alertmanager/alertmanager.yml:

global:
  smtp_smarthost: 'localhost:25'
  smtp_from: 'alertmanager@prometheus.com'
  smtp_auth_username: ''
  smtp_auth_password: ''
  smtp_require_tls: false

templates:
- '/etc/alertmanager/template/*.tmpl'

route:
  repeat_interval: 1h
  receiver: operations-team

receivers:
- name: 'operations-team'
  email_configs:
  - to: 'operations-team+alerts@example.org'
  slack_configs:
  - api_url: https://hooks.slack.com/services/XXXXXX/XXXXXX/XXXXXX
    channel: '#prometheus-course'
    send_resolved: true
 "
####################################################################
Alertmanager - activity
-------------------------
1st - download alertmanager ->execute ->process
2nd - write promQL in yaml format ->alerrules then update this rule file to prometheus
|
3rd - [prometheus] 
	pending state
	|
	criticalstate -----call---------alertmanager(R+)
					  |
					  alertmanager.yml
					   ..... ---------notify--->.....
file: p2.yml  => /etc/prometheus/p2.yml
groups:
- name: node1
  rules:
  - alert: cpuUsage
    expr: avg by(instance)(rate(node_cpu_seconds_total{mode="idle"}[5m]))*100 >50
    for: 1m
    labels:
     severity: critical
    annotations:
     summary: Machine is critical state

#############################################################################

Channel configuarations
-------------------------
Step 1: https://company.com/slack.com/apps
|
Step 2: [manage] <-- Goto manage
|
Step 3: customeintegration
|
Step 4: Incoming webhooks
|
Step 5: add a configuration
|
Step 6: choose channel
|
Step 7: webhook_url: https://hooks.slack.... <== copy this line
|
Step 8: paste it into alertmanager.yml
		      |
		     slack_configs:
		     - api_url: https:// <paste>
Step 9: restart alertmanager
--------------------------------------------------------

Service Discovery
--------------------
 
 |->1. prometheus - to scrape metrics using static configuration via static_configs:
 
 |->2. for dynamic env - [new instance ; getting ipAddress; any updates]//SD

 Configuration Management Technique(ex: ansible)
--------------------------------------------------

  [ Control M/C ]  ----------------------------->[remote1]
	|					 install update start...
	inventoryFile	------------------------>
	|
	[group]
	<remoteNode>
	<remoteNode>
	..

/etc/ansible/hosts
[web]
node1
node2
node3
[DB]
node4
node5
[QA]
node6
node7
---------//inventoryFile

ansible all # all the groups

prometheus.yml
|
scrape_configs:
- job_name: node
  static_configs:
   - targs:
      {% for var in groups["all"]%}
	    - {{var}}:9100
      {% endfor%}
-----------------------

scrape_configs:
- job_name: node
  static_configs:
  - targets: ["10.20.30.40:9100"]
  - targets: ["10.20.33.44:9100"]
  - targets: ["10.20.33.32:9100"]

node_cpu_total
	{instance="10.20.30.40:9100",job="node"}
	{instance="10.20.33.44:9100",job="node"}
	{instance="10.20.33.32:9100",job="node"}
				    --------------//common job name
 |
 |
Service discovery
fileSD
-------
|->json 
|-> metadata __<name>__ <== 
|
|-> prometheus restart is not required

prometheus.yml
|
scrape_configs:
- job_name: "filesd"
  file_sd_configs:
   - files:
     - 'p1.json'
	 <or>
     - '*.json'
#############################################################################
service discovery activity
---------------------------
1. stop prometheus.exe (or) systemctl stop prometheus.service
|
2. backup an existing promtheus.yml file => backup_prometheus.yml
|
3. edit promtheus.yml
	#- alertmanager: 9093 <-- comment this line
	...
	...
	scrape_configs:
	- job_name: "filesd"
  	file_sd_configs:
   	  - files: 
	     - '*.json'
    |
   save this file
|
4. start this prometheus.exe (or) systemctl start prometheus
------------------------------
|
5. Go to prometheus.yml file location 
   |
6. create one python file( vi f1.json)
   |
  file: p1.py
  
  import json
  L=[{"targets":["localhost:9090"],"labels":{"job":"mylocalhost"}}]
  wobj = open("f1.json","w")
  json.dump(L,wobj)
  wobj.close()
  
  save this file
  |
  windows:  python p1.py    <or>   Linux/mac: python3 p1.py

|
7. dir <or> ls # see f1.json file is exists
|
8. Go to prometheus targets ->refresh broswer ->service discovery
|
9. edit python code
   |
    file: p1.py
  import json
  L=[{"targets":["130.61.219.331:9100"],"labels":{"job":"Cloud-ol8"}}]
  wobj = open("f2.json","w")
  json.dump(L,wobj)
  wobj.close()
  
  save and run this file
  |
  windows:  python p1.py    <or>   Linux/mac: python3 p1.py

 |-> Go to prometheus targets ->refresh broswer ->service discovery

######################################################################################

Old-style 
----------
|-> aws cloud

scrape_configs:
- job_name: <jobName>
  ec2_sd_configs:
   - region: <region> 
     accesskey:
     secretkey: ...
     ...
aws_...
---------------------

 
 import json
  L=[{"targets":["130.61.219.331:9100",],"labels":{"job":"Cloud-ol8"}},{"targets":["192.168.1.10:9100",],"labels":{"job":"OL7-node"}},{"targets":["130.61.219.442:9100",],"labels":{"job":"Cloud-Linux"}}]
  wobj = open("f4.json","w")
  json.dump(L,wobj)
  wobj.close()

#######################################################################
  

scrape_configs:
- job_name: consul
  consul_sd_configs:
  - server: 'localhost:9107'

######################################################################
Container - cAdvisor
	    --------
	    |->same way the node exporter provides metrics about the machine
	    |->cAdvisor is an exporter ->provides metrics about cgroups


  Appln: CGI: web  server DB
	 ---------------------
	     Kernel 
	 ---------------------
	   H/W

		Vs
   Appln: CGI: [web]|[server]|[DB]
	      ______________________
		[LXC] [LXC] [LXC] <-- sub-system - cgroups
		  Kernel
		---------------- 
			H/W
  .service
  .slice 
  .target
  .mounts
  .system/
	|->list of all the services
  .user/
	|->userA - 1000
		     |->.....
	|->userB - 1001
		     |->....
  .machine
 
 download container 
 execute the container
 |
...
curl <>:<port>/metrics
..
 
OL8
----
wget https://github.com/google/cadvisor/releases/download/v0.52.1/cadvisor-v0.52.1-linux-amd64
ls -l 
chmod a+x cadvisor-v0.52.1-linux-amd64
./cadvisor-v0.52.1-linux-amd64
...
...
:8080
|
open another terminal => curl 127.0.0.1:8080/metrics
			 ...
			 ...
|
  file: p1.py
  import json
  L=[{"targets":["130.61.219.331:8080"],"labels":{"job":"cadv"}}]
  wobj = open("f3.json","w")
  json.dump(L,wobj)
  wobj.close()
######################################################################################
Grafana - alert

http://localhost:3000/dashboard/snapshot/Phc9RK4GDMGxbOmAOtJldvdIrEpralck


https://snapshots.raintank.io/dashboard/snapshot/iepXfmw5c6BIxOq1ZZ19tyk9wt75PIPj

http://localhost:3000/goto/jQVbVo-NR?orgId=1

http://localhost:3000/public-dashboards/b471d1de9cb14c4fac27bb17b475efe6

Organization 
 |->Team
      |->sales
	   |->user1 user2 user3
      |->QA
	   |->userA, userB

login: admin
	|-> can create datasource;dashboard;edit,query,threshold,alert....
				  install plugin
role
----
admin role   --- create a new user ; can't create datasource
editor role  --- create dashboard - view - edit panel attributes ; not datasource
view role    --- view only

Grafana + prometheus(measurement) 
	  by SoundCloud
	  metric model
	  promQL

---------------------------------------------------------------------
Grafana + loki -> log aggregation(text)
	   |->this is not measurement
	   |->by Grafana Labs
	   |->interface -like prometheus interface
		
	
 Loki
 -----
 1.loki
 2.promtail
 |
 3.grafana

[App]->[logs-event]
[App]->[logs-event] -  [promtail] --------->[loki]------->Grafana - Visualize logs
..			
[App]->[logs-event]

promtail
loki
|
download loki and promtail
	 ...
https://github.com/grafana/loki/releases 
https://raw.githubusercontent.com/grafana/loki/master/cmd/loki/loki-local-config.yaml
https://github.com/grafana/loki/blob/main/clients/cmd/promtail/promtail-local-config.yaml

loki-config.yml
promtail-config.yml

./loki -config=loki-config.yml
./promtail -config=promtail-local-config.yml
...
|
Go to grafana ->datasource ->loki
##################################################################################

Grafana reference book link:
--------------------------------
https://learning.oreilly.com/library/view/learn-grafana-10-x/9781803231082/
##################################################################################




